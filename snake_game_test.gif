import turtle
import random
import time
from PIL import Image

# Configuração da tela
wn = turtle.Screen()
wn.title("Snake Game")
wn.bgcolor("white")
wn.setup(width=600, height=600)
wn.tracer(0)  # Desativa as atualizações da tela

# Cabeça da cobra
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("#ADD8E6")  # Cor azul pastel
head.penup()
head.goto(0, 0)
head.direction = "stop"

# Comida
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0, 100)

segments = []

# Funções de movimento
def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"

def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)

    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)

    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)

    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

# Ligações do teclado
wn.listen()
wn.onkey(go_up, "w")
wn.onkey(go_down, "s")
wn.onkey(go_left, "a")
wn.onkey(go_right, "d")

# Loop principal do jogo
frames = []
while True:
    wn.update()

    # Verifica colisão com a comida
    if head.distance(food) < 20:
        # Move a comida para um local aleatório
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x, y)

        # Adiciona um segmento
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("#ADD8E6")  # Cor azul pastel
        new_segment.penup()
        segments.append(new_segment)

    # Move os segmentos finais em ordem reversa
    for index in range(len(segments)-1, 0, -1):
        x = segments[index-1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x, y)

    # Move o segmento 0 para onde está a cabeça
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    move()

    # Verifica colisão com a borda
    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "stop"

        # Esconde os segmentos
        for segment in segments:
            segment.goto(1000, 1000)

        # Limpa a lista de segmentos
        segments.clear()

    # Verifica colisão com os segmentos do corpo
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = "stop"

            # Esconde os segmentos
            for segment in segments:
                segment.goto(1000, 1000)

            # Limpa a lista de segmentos
            segments.clear()

    # Captura frame a frame para criação do GIF
    canvas = wn.getcanvas()
    canvas.postscript(file="frame.ps", colormode='color')
    img = Image.open("frame.ps")
    frames.append(img.convert('RGB'))

    time.sleep(0.1)

# Salva os frames como uma animação GIF
frames[0].save('snake_game.gif', save_all=True, append_images=frames[1:], optimize=False, duration=100, loop=0)

# LMCSHARPEANDO

turtle.done()
